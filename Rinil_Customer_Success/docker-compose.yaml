version: "3.0"
services:
  rorreactwebapp:
    container_name: ror-react-web-app-container
    build: ./Frontend/
    image: jainilp12/rorreactwebapp:1.0
    ports:
      - 3000:${REACT_PORT}
      - 80:80
    expose:
      - ${REACT_PORT}
      - 80
    environment:
      SERVICE_TAGS: dev
      SERVICE_NAME: rorreactwebapp
    networks:
      - internalnet
    depends_on:
      - rorapi

  rorapi:
    container_name: ror-api-container
    build: ./Backend/
    image: jainilp12/rorapi:1.0
    ports:
      - 4000:${SERVER_PORT}
    expose:
      - ${SERVER_PORT}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      RAILS_ENV: ${RAILS_ENV}
      POSTGRES_PORT: ${POSTGRES_PORT}
      #      AUTH0_SECRET: ${AUTH0_SECRET}
      #      AUTH0_BASE_URL: ${AUTH0_BASE_URL}
      #      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      #      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      #      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      SERVER_PORT: ${SERVER_PORT}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      
    command: >
      bash -c "rails db:create
      && rails db:migrate
      && rails server -e production -b 0.0.0.0 -p 4000"
    networks:
      - internalnet
    depends_on:
      pgdb:
        condition: service_healthy

  pgdb:
    image: postgres
    container_name: postgres-ror-container
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${HOME}/rorpostgresdatabase:/var/lib/postgresql/data
    networks:
      - internalnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s

networks:
  internalnet:
    driver: bridge
